openapi: 3.0.4
info:
  title: Brise Cloud API
  version: 3.0.0
  contact:
    name: AGST
    email: ped@agst.com.br
    url: https://www.agst.com.br
  description: |
    # Introdu√ß√£o

    A **Brise Cloud API** √© a interface oficial para integra√ß√£o com o sistema Brise por meio do servi√ßo remoto.  
    Ela permite que aplica√ß√µes de automa√ß√£o se comuniquem com dispositivos Brise conectados ao servi√ßo remoto **Brise Cloud**, facilitando a integra√ß√£o com sistemas de supervis√£o, gest√£o predial, automa√ß√£o residencial e industrial.

    Todas as requisi√ß√µes e respostas utilizam o formato **JSON**, garantindo interoperabilidade e facilidade de processamento em diferentes plataformas.

    > Al√©m da solu√ß√£o remota, a **Brise LAN API** oferece comunica√ß√£o direta com os dispositivos Brise dentro da mesma rede local, sem depend√™ncia de conex√£o com a internet.
    > 
    > Essa API √© ideal para cen√°rios onde:
    > - A conectividade com a internet n√£o √© confi√°vel ou aceit√°vel.
    > - Baixa lat√™ncia √© essencial.
    > - O controle local √© priorit√°rio por quest√µes de seguran√ßa ou desempenho.

    ## Funcionalidades principais

    - **Consultar e controlar dispositivos Brise** conectados ao servi√ßo remoto  
    - **Gerenciar grupos de dispositivos** e suas configura√ß√µes centralizadas  
    - **Monitorar status em tempo real** e m√©tricas operacionais  
    - **Integrar de forma unificada** com sistemas de terceiros via RESTful  

    As chamadas s√£o baseadas em m√©todos **RESTful**, seguindo boas pr√°ticas de design de APIs, com autentica√ß√£o segura e respostas padronizadas para facilitar o desenvolvimento e a manuten√ß√£o.  

    # üîê Autentica√ß√£o

    Este t√≥pico descreve os m√©todos de autentica√ß√£o dispon√≠veis e como utiliz√°-los.  

    > ‚ö†Ô∏è **Recomenda√ß√£o**: Utilize OAuth 2.0 com fluxo `authorizationCode` para integra√ß√µes seguras.

    <!-- ReDoc-Inject: <security-definitions> -->

    ## üöÄ Primeiros Passos
    1. Registre seu aplicativo no [Portal de Desenvolvedores](https://brise.agst.com.br/api/v3/sp/application.html)
    2. Obtenha `client_id` e `client_secret`
    3. Inicie o fluxo OAuth2 ou gere um JWT
    4. Inclua o token nas requisi√ß√µes autenticadas
    
servers:
  - url: "https://brise.agst.com.br/api/v3"
    description: Servidor de Produ√ß√£o
  - url: "https://intranet.agst.com.br:8090/api/v3"
    description: Servidor local de desenvolvimento

tags:
  - name: Usu√°rios
    description: |
      Esta categoria abrange o gerenciamento de contas no sistema Brise Cloud. Ela permite criar novos usu√°rios, enviar tokens de ativa√ß√£o, ativar contas pendentes e solicitar o reenvio de um novo token caso o anterior tenha expirado ou seja perdido. O objetivo √© fornecer um processo seguro e consistente para que os usu√°rios completem sua ativa√ß√£o e possam acessar os recursos do sistema.

      > ‚ö†Ô∏è **Nota importante:**  
      > Muitos dos endpoints deste grupo n√£o requerem autentica√ß√£o, pois s√£o necess√°rios para a cria√ß√£o da conta. A princ√≠pio, ser√£o usados apenas por sistemas internos, integrando com o App, e **n√£o ser√£o divulgados na API p√∫blica**.
  - name: Corpora√ß√µes
    description: |
      Agrupa os conjuntos de endpoints respons√°veis pelo gerenciamento de corpora√ß√µes no sistema.  

      Permite criar, consultar e manter informa√ß√µes das corpora√ß√µes, bem como gerenciar o v√≠nculo entre usu√°rios e suas respectivas organiza√ß√µes.  
  - name: Aplica√ß√µes
    description: |
      Agrupa os endpoints respons√°veis pelo cadastro e gerenciamento de aplica√ß√µes que poder√£o interagir com a API Brise Cloud via OAuth2.  

      > ‚ÑπÔ∏è Observa√ß√µes:
      > - Cada aplica√ß√£o pertence a um usu√°rio registrado (`owner_id`).  
      > - Ap√≥s o cadastro, a aplica√ß√£o fica com status `pending` at√© avalia√ß√£o da equipe.  
      > - Ap√≥s libera√ß√£o, o sistema fornece `client_id` e `client_secret`.
paths:
  /users:
    post:
      tags:
        - Usu√°rios
      summary: Criar usu√°rio
      description: |
        Registra um novo usu√°rio no sistema Brise Cloud.  
        Por padr√£o, a conta √© criada com status `pending`.

        > ‚ÑπÔ∏è **Observa√ß√µes:**  
        >- Um token de ativa√ß√£o √© enviado para o e-mail informado no cadastro.  
        >- O token deve ser utilizado em outro endpoint para ativar a conta.  
        >- Contas corporativas devem ser criadas por administradores de organiza√ß√µes.

        > üö® **Nota Importante:**  
        > O path deste deve ser alterado para algo menos √≥bvio quando for para produ√ß√£o, para evitar spam e ataques de for√ßa bruta uma vez que n√£o requer autentica√ß√£o.
      operationId: createUser
      requestBody:
        description: Dados do usu√°rio a ser criado
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - full_name
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Endere√ßo de e-mail do usu√°rio
                full_name:
                  type: string
                  description: Nome completo do usu√°rio
                password:
                  type: string
                  format: password
                  description: Senha do usu√°rio (m√≠nimo 8 caracteres)
            examples:
                createUserRequest:
                  summary: Exemplo de requisi√ß√£o para cria√ß√£o de usu√°rio
                  value:
                    email: "joao.silva@exemplo.com"
                    full_name: "Jo√£o Silva"
                    password: "senhaSegura123"
      responses:
        '201':
          description: Usu√°rio criado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    readOnly: true
                    example: 101
                  status:
                    type: string
                    enum: [pending, active, blocked]
                    default: pending
                    example: pending
                  created_at:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2025-09-09T10:00:00Z"
        '400':
          description: Requisi√ß√£o inv√°lida. Verifique os dados enviados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflito. O e-mail j√° est√° em uso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: EMAIL_ALREADY_IN_USE

  /users/activate:
    post:
      tags:
        - Usu√°rios
      summary: Ativar usu√°rio
      description: |
        Ativa uma conta de usu√°rio previamente criada no sistema Brise Cloud usando um token de ativa√ß√£o enviado por e-mail.

        > ‚ÑπÔ∏è **Observa√ß√µes:**  
        > - O token de ativa√ß√£o expira ap√≥s 7 dias.  
        > - A qualquer momento, antes ou depois de expirar, pode ser solicitado o reenvio do token atrav√©s de outro endpoint.  
        > - Ap√≥s a ativa√ß√£o, o status do usu√°rio passa de `pending` para `active`.

        > üö® **Nota Importante:**  
        > O path deste deve ser alterado para algo menos √≥bvio quando for para produ√ß√£o, para evitar spam e ataques de for√ßa bruta uma vez que n√£o requer autentica√ß√£o.
      operationId: activateUser
      requestBody:
        description: Dados necess√°rios para ativa√ß√£o do usu√°rio
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
              properties:
                email:
                  type: string
                  format: email
                  description: Endere√ßo de e-mail do usu√°rio a ser ativado
                token:
                  type: string
                  description: C√≥digo de verifica√ß√£o recebido por e-mail
            examples:
                activateUserRequest:
                  summary: Exemplo de requisi√ß√£o para ativa√ß√£o de usu√°rio
                  value:
                    email: "joao.silva@exemplo.com"
                    token: "123456"
      responses:
        '200':
          description: Usu√°rio ativado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 101
                  status:
                    type: string
                    enum: [pending, active, blocked]
                    example: active
                  updated_at:
                    type: string
                    format: date-time
                    example: "2025-09-22T14:00:00Z"
        '400':
          description: Requisi√ß√£o inv√°lida. Token ou e-mail ausente ou incorreto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Token inv√°lido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: INVALID_TOKEN

  /users/resend-activation:
    post:
      tags:
        - Usu√°rios
      summary: Reenviar token de ativa√ß√£o
      description: |
        Solicita o reenvio de um **novo token de ativa√ß√£o** para um usu√°rio cuja conta ainda n√£o foi ativada.

        > ‚ÑπÔ∏è **Observa√ß√µes:**  
        > - Um **novo token** ser√° enviado para o e-mail informado.  
        > - O token antigo √© invalidado assim que o novo √© gerado.  
        > - Pode ser solicitado a qualquer momento, mesmo que o token anterior tenha expirado.  
        > - Ap√≥s receber o novo token, o usu√°rio deve utiliz√°-lo para ativar sua conta atrav√©s do endpoint `/users/activate`.

        > üö® **Nota Importante:**  
        > O path deste deve ser alterado para algo menos √≥bvio quando for para produ√ß√£o, para evitar spam e ataques de for√ßa bruta uma vez que n√£o requer autentica√ß√£o.
      operationId: resendActivationToken
      requestBody:
        description: E-mail do usu√°rio que receber√° o novo token de ativa√ß√£o
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Endere√ßo de e-mail do usu√°rio que receber√° o novo token
            examples:
              resendActivationRequest:
                summary: Exemplo de requisi√ß√£o para reenvio de token
                value:
                  email: "joao.silva@exemplo.com"
      responses:
        '200':
          description: Novo token de ativa√ß√£o enviado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Novo token de ativa√ß√£o enviado com sucesso para joao.silva@exemplo.com"
        '400':
          description: Requisi√ß√£o inv√°lida. E-mail ausente ou formato incorreto.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: INVALID_REQUEST
        '404':
          description: Usu√°rio n√£o encontrado ou j√° ativo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: USER_NOT_FOUND

  /users/login:
    post:
      tags:
        - Usu√°rios
      summary: Autenticar usu√°rio
      description: |
        Permite que um usu√°rio autenticado acesse o sistema Brise Cloud utilizando e-mail e senha. 
        Retorna um token de sess√£o (JWT ou outro esquema de autentica√ß√£o) que deve ser utilizado nas requisi√ß√µes subsequentes aos endpoints que requerem autentica√ß√£o.

        > ‚ÑπÔ∏è **Observa√ß√µes:**  
        > - Apenas usu√°rios com status `active` podem se autenticar.  
        > - Usu√°rios com status `pending` iniciaram automaticamente o processo de ativa√ß√£o, e um c√≥digo de ativa√ß√£o √© enviado para o e-mail cadastrado.  
        > - Usu√°rios com status `blocked` n√£o podem realizar login e receber√£o uma mensagem de erro apropriada.

        > üö® **Nota Importante:**  
        > O path deste deve ser alterado para algo menos √≥bvio quando for para produ√ß√£o, para evitar spam e ataques de for√ßa bruta uma vez que n√£o requer autentica√ß√£o.
      operationId: loginUser
      requestBody:
        description: Credenciais do usu√°rio
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Endere√ßo de e-mail do usu√°rio
                password:
                  type: string
                  format: password
                  description: Senha do usu√°rio
            examples:
                loginRequest:
                  summary: Exemplo de requisi√ß√£o para autentica√ß√£o de usu√°rio
                  value:
                    email: "joao.silva@exemplo.com"
                    password: "senhaSegura123"
      responses:
        '200':
          description: Login realizado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Token de acesso para autentica√ß√£o nos endpoints protegidos
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token:
                    type: string
                    description: Token utilizado para renovar o token de acesso
                    example: "dGhpc2lzc2Ftb3JlZnJlc2h0b2tlbg=="
                  expires_in:
                    type: integer
                    format: int64
                    description: Tempo em segundos para expira√ß√£o do token de acesso sendo o padr√£o (48 horas)
                    default: 172800
                    example: 172800
                  token_type:
                    type: string
                    description: Tipo do token emitido
                    example: "Bearer"
        '400':
          description: Requisi√ß√£o inv√°lida. Campos obrigat√≥rios ausentes ou formato incorreto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: |
            Credenciais inv√°lidas ou usu√°rio n√£o ativo.  
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: INVALID_CREDENTIALS
                    enum: [INVALID_CREDENTIALS, USER_BLOCKED, USER_PENDING]

  /users/validate-token:
    get:
      tags:
        - Usu√°rios
      summary: Validar token
      description: |
        Verifica se o token de autentica√ß√£o fornecido √© v√°lido, ainda n√£o expirou ou se foi revogado. 
        Este endpoint pode ser usado por aplicativos ou plataformas para confirmar a validade do token armazenado, evitando a necessidade de login completo.  

        √â especialmente √∫til em cen√°rios de **‚Äúlembrar login‚Äù**, permitindo que o sistema valide um token salvo localmente antes de solicitar novamente as credenciais do usu√°rio, proporcionando uma experi√™ncia mais fluida e segura.
      operationId: validateToken
      security:
        - bearerAuth: []
      parameters:
      - in: header
        name: Authorization
        required: true
        description: Token de autentica√ß√£o no formato `Bearer <access_token>`
        schema:
          type: string
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token v√°lido.
          content:
            application/json:
              schema:
                type: object
                properties:
                  expires_at:
                    type: integer
                    format: int64
                    description: Tempo em segundos para expira√ß√£o do token de acesso
                    example: 3600
        '401':
          description: |
            Token inv√°lido ou expirado.  
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: INVALID_TOKEN
                    enum: [INVALID_TOKEN, EXPIRED_TOKEN, USER_NOT_FOUND]

  /corporations:
    post:
      tags:
        - Corpora√ß√µes
      summary: Criar corpora√ß√£o
      description: |
        Registra uma nova **corpora√ß√£o** no sistema Brise Cloud.  

        O usu√°rio autenticado que realiza a requisi√ß√£o √© automaticamente convertido em um **usu√°rio corporativo**, tornando-se o **owner** da corpora√ß√£o.  

        O v√≠nculo entre usu√°rio e corpora√ß√£o √© estabelecido internamente pela API, e o campo `owner_id` √© definido de forma autom√°tica, sem necessidade de envio pelo cliente.  
      operationId: createCorporation
      security:
        - bearerAuth: []
      requestBody:
        description: Dados da corpora√ß√£o a ser criada
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - tax_id
              type: object
              properties:
                name:
                  type: string
                  description: Nome fantasia da corpora√ß√£o
                  example: "Tech Solutions Ltda."
                tax_id:
                  type: string
                  description: CNPJ da corpora√ß√£o
                  example: "12.345.678/0001-90"
      responses:
        '201':
          description: Corpora√ß√£o criada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 301
                  status:
                    type: string
                    enum: [ 'active', 'suspended', 'deleted' ]
                    example: active
                  created_at:
                    type: string
                    format: date-time
                    example: "2025-09-22T15:30:00Z"
        '400':
          description: Requisi√ß√£o inv√°lida, dados ausentes ou incorretos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflito, corpora√ß√£o com mesmo CNPJ j√° existe.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: CORPORATION_ALREADY_EXISTS
        '401':
          description: N√£o autorizado (token ausente ou inv√°lido).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: INVALID_TOKEN
  
  /corporations/{corporation_id}:
    get:
      tags:
        - Corpora√ß√µes
      summary: Obter dados de corpora√ß√£o
      description: |
        Retorna as informa√ß√µes detalhadas de uma corpora√ß√£o espec√≠fica no Brise Cloud.

        O usu√°rio precisa estar associado √† corpora√ß√£o como propriet√°rio ou administrador para acess√°-la.  
      operationId: getCorporationById
      security:
        - bearerAuth: []
      parameters:
        - name: corporation_id
          in: path
          required: true
          schema:
            type: integer
          description: ID da corpora√ß√£o
      responses:
        '200':
          description: Dados da corpora√ß√£o retornados com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 301
                  name:
                    type: string
                    example: "Tech Solutions Ltda."
                  tax_id:
                    type: string
                    example: "12.345.678/0001-90"
                  owner_id:
                    type: integer
                    example: 101
                  status:
                    type: string
                    enum: [ 'active', 'suspended', 'deleted' ]
                    example: active
                  created_at:
                    type: string
                    format: date-time
                    example: "2025-09-22T15:30:00Z"
                  updated_at:
                    type: string
                    format: date-time
                    example: "2025-10-01T10:00:00Z"
        '400':
          description: Requisi√ß√£o inv√°lida. Campos ausentes ou incorretos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Corpora√ß√£o n√£o encontrada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: CORPORATION_NOT_FOUND

  /corporations/{corporation_id}/members:
    get:
      tags:
        - Corpora√ß√µes
      summary: Listar membros da corpora√ß√£o
      description: |
        Retorna a lista de usu√°rios vinculados a uma corpora√ß√£o, incluindo o **owner** e os membros corporativos.  

        > ‚ö†Ô∏è **Nota:** 
        > Apenas usu√°rios administradores da corpora√ß√£o podem acessar esta informa√ß√£o.
      operationId: listCorporationMembers
      security:
        - bearerAuth: []
      parameters:
        - name: corporation_id
          in: path
          required: true
          schema:
            type: integer
          description: ID da corpora√ß√£o
      responses:
        '200':
          description: Lista de membros retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      description: ID do usu√°rio
                      example: 202
                    email:
                      type: string
                      description: E-mail do usu√°rio
                      example: "pedro.rabello@empresa.com"
                    full_name:
                      type: string
                      description: Nome completo do usu√°rio
                      example: "Pedro Rabello"
                    role:
                      type: string
                      enum: [owner, admin, user]
                      description: Papel do usu√°rio na corpora√ß√£o (owner, admin ou user)
                      example: "admin"
                    member_status:
                      type: string
                      enum: [pending, active, rejected, revoked]
                      description: Status do v√≠nculo do usu√°rio com a corpora√ß√£o
                      example: pending
                    user_status:
                      type: string
                      enum: [active, pending, blocked]
                      description: Status da conta do usu√°rio no sistema
                      example: active
                    created_at:
                      type: string
                      format: date-time
                      description: Data de cria√ß√£o do v√≠nculo
                      example: "2023-01-01T12:00:00Z"
              examples:
                memberList:
                  summary: Exemplo de lista de membros de uma corpora√ß√£o
                  value:
                    - user_id: 202
                      email: "pedro.rabello@empresa.com"
                      full_name: "Pedro Rabello"
                      role: "owner"
                      member_status: "active"
                      user_status: "active"
                      created_at: "2023-01-01T12:00:00Z"
                      updated_at: "2023-01-10T15:30:00Z"
                    - user_id: 203
                      email: "maria.esteves@empresa.com"
                      full_name: "Maria Esteves"
                      role: "user"
                      member_status: "rejected"
                      user_status: "active"
                      created_at: "2023-02-05T09:20:00Z"
                      updated_at: "2023-02-15T11:45:00Z"
                    - user_id: 204
                      email: "carlos.garcia@empresa.com"
                      full_name: "Carlos Garcia"
                      role: "admin"
                      member_status: "pending"
                      user_status: "active"
                      created_at: "2023-03-10T14:00:00Z"
                      updated_at: "2023-03-12T16:30:00Z"
        '403':
          description: Usu√°rio n√£o possui acesso a esta corpora√ß√£o.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ACCESS_DENIED
        '404':
          description: Corpora√ß√£o n√£o encontrada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: CORPORATION_NOT_FOUND
    post:
      tags:
        - Corpora√ß√µes
      summary: Adicionar membro √† corpora√ß√£o
      description: |
        Adiciona um novo membro a uma corpora√ß√£o, criando um novo usu√°rio (se ainda n√£o existir) ou vinculando um usu√°rio j√° registrado no sistema Brise Cloud.

        - Se o usu√°rio ainda **n√£o existir**, ser√° criado com `user_status = pending` (aguardando ativa√ß√£o da conta) e o v√≠nculo j√° ativo (`member_status = active`).  
        - Se o usu√°rio j√° **existir**, ser√° vinculado inicialmente com `member_status = pending`, aguardando a aceita√ß√£o do convite.  
        - O v√≠nculo s√≥ se torna efetivo quando o usu√°rio aceita o convite, momento em que `member_status = active`.  

        O `user_status` representa o estado da conta do usu√°rio no sistema, enquanto o `member_status` representa apenas a rela√ß√£o do usu√°rio com a corpora√ß√£o.  

        > ‚ö†Ô∏è **Nota:** 
        > Apenas usu√°rios **administradores** da corpora√ß√£o podem adicionar novos membros.
      operationId: addCorporationMember
      security:
        - bearerAuth: []
      parameters:
        - name: corporation_id
          in: path
          required: true
          schema:
            type: integer
          description: ID da corpora√ß√£o
      requestBody:
        description: Dados do usu√°rio a ser adicionado como membro
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  format: email
                  description: E-mail do usu√°rio a ser adicionado (deve estar registrado no sistema)
                  example: "pedro.rabello@empresa.com"
                full_name:
                  type: string
                  description: Nome completo do usu√°rio. Obrigat√≥rio se o usu√°rio ainda n√£o existir.
                  example: "Pedro Rabello"
                password:
                  type: string
                  format: password
                  description: Senha do usu√°rio (m√≠nimo 8 caracteres). Obrigat√≥rio se o usu√°rio ainda n√£o existir.
                  example: "senhaSegura123"
                role:
                  type: string
                  enum: [ 'admin', 'user' ]
                  description: Papel do usu√°rio na corpora√ß√£o (admin ou user)
                  example: "admin"
                
      responses:
        '201':
          description: Membro adicionado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    description: ID do usu√°rio
                    example: 203
                  member_status:
                    type: string
                    enum: [pending, active, rejected, revoked]
                    description: Status do v√≠nculo do usu√°rio com a corpora√ß√£o
                    example: pending
                  user_status:
                    type: string
                    enum: [active, pending, blocked]
                    description: Status da conta do usu√°rio no sistema
                    example: active
                  created_at:
                    type: string
                    format: date-time
                    description: Data de cria√ß√£o do v√≠nculo
                    example: "2023-01-01T12:00:00Z"
        '400':
          description: Requisi√ß√£o inv√°lida. Campos ausentes ou incorretos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Usu√°rio n√£o possui acesso a esta corpora√ß√£o.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ACCESS_DENIED
        '404':
          description: Corpora√ß√£o ou usu√°rio n√£o encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: CORPORATION_NOT_FOUND
        '409':
          description: Conflito, usu√°rio j√° √© membro da corpora√ß√£o.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: USER_ALREADY_MEMBER
            

  /applications:
    post:
      tags:
        - Aplica√ß√µes
      summary: Solicitar cadastro
      description: |
        Permite que um usu√°rio registrado no Brise Cloud solicite o cadastro de uma aplica√ß√£o
        que poder√° interagir com a API via OAuth2. Ap√≥s a an√°lise da equipe, ser√° atribu√≠do
        um `client_id` e `client_secret`.

        > ‚ÑπÔ∏è Observa√ß√µes:
        > - O usu√°rio deve existir no Brise Cloud.
        > - A solicita√ß√£o ser√° criada com status `pending` at√© ser avaliada.
        > - Campos obrigat√≥rios: `name`, `email`, `contact_name`, `contact_phone`.

        > üö® **Nota Importante:**  
        > Quando houver a plataforma implementada as solicita√ß√µes dever√£o ser atraves dela e por tanto respeitando as regras de seguran√ßa, deixando de ser um endpoint publico.
      operationId: createApplication
      requestBody:
        description: Dados da aplica√ß√£o a ser registrada
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - contact_name
                - contact_phone
              properties:
                name:
                  type: string
                  description: Nome da aplica√ß√£o
                  example: "Meu Sistema de Gest√£o"
                email:
                  type: string
                  format: email
                  description: E-mail do propriet√°rio (usu√°rio Brise Cloud)
                  example: "usuario@exemplo.com"
                contact_name:
                  type: string
                  description: Nome de contato da aplica√ß√£o
                  example: "Jo√£o Silva"
                contact_phone:
                  type: string
                  description: Telefone de contato da aplica√ß√£o
                  example: "+55 (11) 99999-9999"
                redirect_uri:
                  type: string
                  description: URI de callback OAuth2 (opcional)
                  example: "https://meuapp.com/oauth/callback"
      responses:
        '201':
          description: Solicita√ß√£o registrada com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 501
                  status:
                    type: string
                    enum: [pending, active, revoked]
                    example: pending
                  created_at:
                    type: string
                    format: date-time
                    example: "2025-09-24T14:00:00Z"
                  message:
                    type: string
                    example: "Solicita√ß√£o registrada com sucesso. A equipe ir√° analisar e liberar os dados."
        '400':
          description: Requisi√ß√£o inv√°lida. Campos ausentes ou incorretos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usu√°rio n√£o encontrado.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: USER_NOT_FOUND
        '409':
          description: Conflito, aplica√ß√£o com mesmo nome ou e-mail j√° existe.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: APPLICATION_ALREADY_EXISTS

components:
  securitySchemes:
    bearerAuth:
      title: Bearer Authentication
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        O token de acesso JWT deve ser enviado no cabe√ßalho `Authorization` da sua requisi√ß√£o autenticadas.
        
        ```
        Authorization: Bearer <seu-token>
        ```

        Tokens t√™m vida curta e devem ser renovados conforme necess√°rio.  
    oauth2:
      type: oauth2
      description: |
        Este esquema de seguran√ßa segue o padr√£o **OAuth 2.0**, permitindo que aplicativos de terceiros acessem recursos em nome do usu√°rio sem expor a senha diretamente.  

        O fluxo `authorizationCode` √© o mais recomendado, pois garante maior seguran√ßa ao usu√°rio e ao cliente.  
      flows:
        authorizationCode:
          authorizationUrl: "https://brise.agst.com.br/api/v3/oauth/authorize"
          tokenUrl: "https://brise.agst.com.br/api/v3/oauth/token"
  
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: INVALID_REQUEST